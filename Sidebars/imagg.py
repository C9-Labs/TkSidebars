#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    Sep 14, 2021 08:21:11 PM IST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import autosave2_support
import os.path

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    autosave2_support.set_Tk_var()
    top = Toplevel1 (root)
    autosave2_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    autosave2_support.set_Tk_var()
    top = Toplevel1 (w)
    autosave2_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("843x465+270+134")
        top.minsize(120, 1)
        top.maxsize(1370, 729)
        top.resizable(1,  1)
        top.title("New Toplevel")
        top.configure(background="#ffffff")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.74, rely=0.828, height=57, width=168)
        self.Label1.configure(activebackground="#ffffff")
        self.Label1.configure(background="#ffffff")
        self.Label1.configure(borderwidth="0")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Yu Gothic UI Light} -size 14")
        self.Label1.configure(foreground="#0000ff")
        self.Label1.configure(relief="raised")
        self.Label1.configure(text='''Label''')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.menubar.add_command(
                label="NewCommand")
        self.menubar.add_command(
                label="NewCommand")
        self.sub_menu = tk.Menu(top,
                activebackground="#ececec",
                activeborderwidth=1,
                activeforeground="#000000",
                background="#d9d9d9",
                borderwidth=1,
                disabledforeground="#a3a3a3",
                foreground="#000000",
                tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                label="NewCascade")
        self.sub_menu.add_radiobutton(
                value=True,
                variable=autosave2_support.menuSelectedButton,
                label="True")
        self.sub_menu.add_command(
                label="NewCommand")
        self.sub_menu.add_command(
                label="NewCommand")
        self.sub_menu.add_checkbutton(
                variable=autosave2_support.checks_1,
                label="NewCheck")
        self.menubar.add_separator(
)
        self.menubar.add_command(
                label="NewCommand")
        self.sub_menu1 = tk.Menu(top,
                activebackground="#ececec",
                activeborderwidth=1,
                activeforeground="#000000",
                background="#d9d9d9",
                borderwidth=1,
                disabledforeground="#a3a3a3",
                foreground="#000000",
                tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu1,
                label="NewCascade")
        self.sub_menu1.add_radiobutton(
                value=True,
                variable=autosave2_support.menuSelectedButton,
                label="True")
        self.menubar.add_radiobutton(
                value=True,
                variable=autosave2_support.menuSelectedButton,
                label="True")
        self.menubar.add_checkbutton(
                variable=autosave2_support.checks_2,
                label="NewCheck")

        self.TFrame1 = ttk.Frame(top)
        self.TFrame1.place(relx=0.0, rely=0.0, relheight=1.013, relwidth=0.053)
        self.TFrame1.configure(relief='flat')
        self.TFrame1.configure(borderwidth="20")
        self.TFrame1.configure(relief="flat")

        self.Label2 = tk.Label(self.TFrame1)
        self.Label2.place(relx=0.0, rely=0.858, height=73, width=50)
        self.Label2.configure(background="#a8ffa8")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        photo_location = os.path.join(prog_location,"images/icons8-exit-40.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.Label2.configure(image=_img0)
        self.Label2.configure(text='''Label''')

        self.Label3 = tk.Label(self.TFrame1)
        self.Label3.place(relx=0.0, rely=0.0, height=53, width=44)
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        photo_location = os.path.join(prog_location,"images/icons8-face-id-40.png")
        global _img1
        _img1 = tk.PhotoImage(file=photo_location)
        self.Label3.configure(image=_img1)
        self.Label3.configure(text='''FaceTime''')

        self.Label4 = tk.Label(self.TFrame1)
        self.Label4.place(relx=0.0, rely=0.115, height=52, width=42)
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        photo_location = os.path.join(prog_location,"images/icons8-menu-40.png")
        global _img2
        _img2 = tk.PhotoImage(file=photo_location)
        self.Label4.configure(image=_img2)
        self.Label4.configure(text='''Label''')

        self.Label5 = tk.Label(self.TFrame1)
        self.Label5.place(relx=0.0, rely=0.231, height=51, width=44)
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        photo_location = os.path.join(prog_location,"images/icons8-lifebuoy-40.png")
        global _img3
        _img3 = tk.PhotoImage(file=photo_location)
        self.Label5.configure(image=_img3)
        self.Label5.configure(text='''Label''')

        self.Canvas1 = tk.Canvas(top)
        self.Canvas1.place(relx=0.059, rely=0.0, relheight=0.822, relwidth=0.938)

        self.Canvas1.configure(background="#d9d9d9")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="blue")
        self.Canvas1.configure(selectforeground="white")

if __name__ == '__main__':
    vp_start_gui()





